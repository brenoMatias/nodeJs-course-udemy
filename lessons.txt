--Node Modules:

When we define a function it goes to the global scope

we should avoid defining variables and functions
in the global scope. Instead we need modularity we need to
create small building blocks or modules where we define
our variables and functions.

every file in a Node application is considered a
module. The variables and functions defined in that function or
module are a scope to that file. 


So in Node,
every file is a module, and the variables and functions
defined and in that file are a scope to that module, they are not available


--Creating a module:
'logger.js'


--Loading module:

const x = require('./module-name.js) 
     or
import './module-name';


--Node wrapper:

node does not execute our code directly. The way is something like this:

Module Wrapper Function:

(function(exports, require, module, __filename, __dirname) {

})

REQUIRE function is the easiest way to include modules that exist in separate files

   'module.exports.object = func/const;'
       or
   'exports.object = func/log;'



--Path Module

built in modules node:
https://nodejs.org/dist/latest-v16.x/docs/api/

we gonna use this 
   'path.parse(path)'

it can be accessed using:
   'const path = require('path');'



--Events Module

One of the core concepts in Node,
is the concept of events. In fact a lot of Node's core
functionality is based on this concept of events.
An event is basically a signal that indicates that
something has happened in our application